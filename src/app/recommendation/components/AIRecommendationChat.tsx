// src/app/recommendation/components/AIRecommendationChat.tsx

"use client";

import React, { useState } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";
import { TrackingRecommendation } from "@/types";
import { Loader2 } from "lucide-react";

interface AIRecommendationChatProps {
  userId: string;
  onGenerate: (newRecs: TrackingRecommendation[]) => void; // Callback to add recommendations
}

const AIRecommendationChat: React.FC<AIRecommendationChatProps> = ({
  userId,
  onGenerate,
}) => {
  const { toast } = useToast();
  const [input, setInput] = useState("");
  const [isGenerating, setIsGenerating] = useState(false);

  const handleSend = async () => {
    if (!input.trim()) {
      toast({
        title: "Input Required",
        description: "Please enter a description before sending.",
        variant: "destructive",
      });
      return;
    }

    setIsGenerating(true);

    try {
      // Call your existing AI generation API
      const res = await fetch("/api/recommendation/add", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ userId, prompt: input }),
      });

      if (!res.ok) {
        const errorData = await res.json();
        throw new Error(
          errorData.error || "Failed to generate recommendation."
        );
      }

      const data = await res.json();

      if (data.source === "database") {
        // If recommendations are fetched from the database
        const dbRecommendations: TrackingRecommendation[] =
          data.recommendations;
        if (dbRecommendations.length > 0) {
          onGenerate(dbRecommendations);
          toast({
            title: "Existing Recommendations",
            description: `${dbRecommendations.length} recommendations fetched from the database.`,
          });
        } else {
          toast({
            title: "No Recommendations Found",
            description:
              "No existing recommendations found for the provided scopes.",
            variant: "default",
          });
        }
      } else if (data.source === "AI") {
        // If recommendations are generated by AI
        const aiRecommendations: TrackingRecommendation[] =
          data.recommendations;

        onGenerate(aiRecommendations);

        toast({
          title: "Recommendation Generated",
          description: "Your AI-generated recommendation has been created.",
        });
      } else {
        // Handle unexpected sources
        toast({
          title: "Unexpected Response",
          description:
            "Received an unexpected response from the recommendation system.",
          variant: "destructive",
        });
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (error: any) {
      console.error("Error generating recommendation:", error);
      const errorMessage =
        error instanceof Error ? error.message : "An unknown error occurred.";
      toast({
        title: "Error",
        description: errorMessage,
        variant: "destructive",
      });
    } finally {
      setIsGenerating(false);
      setInput("");
    }
  };

  const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === "Enter") {
      e.preventDefault();
      handleSend();
    }
  };

  return (
    <Card className="bg-white shadow-sm">
      <CardHeader>
        <CardTitle className="text-xl font-semibold">
          AI Recommendation Assistant
        </CardTitle>
      </CardHeader>
      <CardContent className="flex flex-col space-y-4">
        {/* Input and Button Container */}
        <div className="flex flex-row items-center space-x-2">
          <Input
            placeholder="Describe what you need ... be specific!"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={handleKeyDown}
            disabled={isGenerating}
            className="flex-1"
          />
          <Button onClick={handleSend} disabled={isGenerating}>
            {isGenerating ? (
              <>
                <Loader2 className="animate-spin mr-2" />
                Generating...
              </>
            ) : (
              "Send"
            )}
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default AIRecommendationChat;
